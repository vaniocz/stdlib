<?xml version="1.0"?>
<ruleset name="Vanio Dependency Injection Extra Bundle Rule Set">
    <rule ref="vendor/consistence/coding-standard/Consistence/ruleset.xml">
        <exclude name="Generic.WhiteSpace.DisallowSpaceIndent"/>
        <exclude name="Generic.WhiteSpace.ScopeIndent"/>
        <exclude name="Squiz.WhiteSpace.MemberVarSpacing"/>
        <exclude name="Squiz.WhiteSpace.FunctionSpacing.Before"/>
        <exclude name="PEAR.Classes.ClassDeclaration"/> <!-- already covered by PSR2.Classes.ClassDeclaration -->
        <exclude name="Squiz.WhiteSpace.ScopeClosingBrace.ContentBefore"/>
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/> <!-- already covered by Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine -->
        <exclude name="Squiz.Functions.GlobalFunction.Found"/> <!-- global functions can be useful sometimes -->
        <exclude name="Squiz.Commenting.EmptyCatchComment"/>
        <exclude name="Squiz.PHP.GlobalKeyword"/>
        <exclude name="Squiz.PHP.Heredoc"/>
        <exclude name="Squiz.PHP.InnerFunctions"/>
        <exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/> <!-- sometimes with many variables -->
        <exclude name="Squiz.Scope.MethodScope"/> <!-- it is OK to not declare visibility in test descriptions and interfaces -->
        <exclude name="PSR1.Methods.CamelCapsMethodName"/> <!-- test descriptions are in snake_case -->
        <exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/> <!-- it can be on the same line when arguments are spread to multiple lines -->
        <exclude name="Generic.NamingConventions.ConstructorName.OldStyle"/> <!-- can be used like a getter instead -->
        <exclude name="PSR1.Files.SideEffects.FoundWithSymbols"/> <!-- sometimes incorrectly marks code as a side effect -->
        <exclude name="PSR1.Classes.ClassDeclaration.MultipleClasses"/> <!-- multiple classes are sometimes useful -->
        <exclude name="Squiz.Classes.ClassFileName.NoMatch"/> <!-- because of multiple classes -->
        <exclude name="Squiz.WhiteSpace.OperatorSpacing.NoSpaceAfterAmp"/> <!-- reference looks better without whitespace -->
    </rule>

    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameAfterKeyword"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/>
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFullyQualifiedName"/>
        <exclude name="SlevomatCodingStandard.Classes.UnusedPrivateElements.unusedMethod"/>
        <exclude name="SlevomatCodingStandard.Types.EmptyLinesAroundTypeBraces"/>
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/>
    </rule>

    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>

    <rule ref="PSR2.Classes.ClassDeclaration">
        <exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNotAlone"/> <!-- {} is allowed -->
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>
</ruleset>
